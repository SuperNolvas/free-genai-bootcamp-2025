"""update_language_content_columns

Revision ID: 3dbcc5965512
Revises: 67c9c7564660
Create Date: 2025-03-14 15:42:47.554391+00:00

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '3dbcc5965512'
down_revision: Union[str, None] = '67c9c7564660'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # First drop the foreign key constraint
    op.drop_constraint('points_of_interest_region_id_fkey', 'points_of_interest', type_='foreignkey')
    
    # Drop indexes and tables in correct order
    op.drop_index('ix_points_of_interest_poi_type', table_name='points_of_interest')
    op.drop_index('ix_points_of_interest_region_id', table_name='points_of_interest')
    op.drop_table('points_of_interest')
    op.drop_table('regions')
    
    # Modify language_content table
    op.alter_column('language_content', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('language_content', 'content_type',
               existing_type=postgresql.ENUM('VOCABULARY', 'PHRASE', 'DIALOGUE', 'CULTURAL_NOTE', name='contenttype'),
               type_=sa.String(),
               existing_nullable=True)
               
    # Add new columns to user_progress
    op.add_column('user_progress', sa.Column('poi_progress', sa.JSON(), server_default='{}', nullable=False))
    op.add_column('user_progress', sa.Column('content_mastery', sa.JSON(), server_default='{}', nullable=False))
    op.add_column('user_progress', sa.Column('achievements', sa.JSON(), server_default='[]', nullable=False))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('user_progress', 'achievements')
    op.drop_column('user_progress', 'content_mastery')
    op.drop_column('user_progress', 'poi_progress')
    
    op.alter_column('language_content', 'content_type',
               existing_type=sa.String(),
               type_=postgresql.ENUM('VOCABULARY', 'PHRASE', 'DIALOGUE', 'CULTURAL_NOTE', name='contenttype'),
               existing_nullable=True)
    op.alter_column('language_content', 'id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False)
               
    # Recreate the tables in reverse order
    op.create_table('regions',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('local_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('languages', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('bounds', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('center', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('difficulty_level', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('requirements', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('total_pois', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_challenges', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('recommended_level', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='regions_pkey')
    )
    
    op.create_table('points_of_interest',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('local_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('local_description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('poi_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('coordinates', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('region_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('difficulty_level', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('content_ids', postgresql.JSON(astext_type=sa.Text()), server_default=sa.text("'[]'::json"), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSON(astext_type=sa.Text()), server_default=sa.text("'{}'::json"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='points_of_interest_pkey')
    )
    
    # Recreate indexes and foreign key
    op.create_index('ix_points_of_interest_region_id', 'points_of_interest', ['region_id'], unique=False)
    op.create_index('ix_points_of_interest_poi_type', 'points_of_interest', ['poi_type'], unique=False)
    op.create_foreign_key('points_of_interest_region_id_fkey', 'points_of_interest', 'regions', ['region_id'], ['id'])
    # ### end Alembic commands ###
